#:kivy 2.0

<StatusBarWidget>:
    canvas:
        Rectangle:
            size: self.size
            pos: self.pos
            source: self._background_image

    spacing: 1
    rows: 1
    cols: 4
    _battery_image: _battery_image
    _battery_label: _battery_label
    _wifi_image: _wifi_image
    _state_image: _state_image
    _speed_image: _speed_image
    _speed_label: _speed_label
    size_hint: 1, 1
    # (r:1, c:1)
    BoxLayout:
        size_hint: 1, 1
        pos_hint: {"center_x": 0.5, "center_y":0.5}
        Image:
            id: _state_image
            name: "state_image"
            size_hint: 1, 1
            pos_hint: {"center_x": 0.5, "center_y":0.5}
            orientation: "horizontal"


# (r:1, c:2)
    BoxLayout:
        size_hint: 1, 1
        pos_hint: {"center_x": 0.5, "center_y":0.5}
        orientation: "vertical"
        StatusBarWidgetImage:
            id: _speed_image
            name: "speed_image"
            size_hint: 1, 1
            pos_hint: {"center_x": 0.5, "center_y":0.5}

        Label:
            id: _speed_label
            name: "speed_label"
            size_hint: 1,1
            pos_hint: {"center_x": 0.5, "center_y":0.5}
            text:"[b]15[/b] \r[i]cm/s[/i]"
            markup: True


    # (r:1, c:3)
    FloatLayout:
        size_hint: 1, 1
        pos_hint: {"center_x": 0.5, "center_y":0.5}
        StatusBarWidgetImage:
            id: _battery_image
            name: "battery_image"
            pos_hint: {"center_x": 0.5, "center_y":0.5}
            on_release: self.parent.parent.on_image_press(self.name)
        Label:
            id: _battery_label
            name: "battery_label"
            size_hint: 1,0.2
            pos_hint: {"center_x": 0.5, "center_y":0.5}
            text:"[b]  15%[/b]"
            markup: True

    # (r:1, c:4)
    BoxLayout:
        size_hint: 1, 1
        pos_hint: {"center_x": 0.5, "center_y":0.5}
        StatusBarWidgetImage:
            id: _wifi_image
            name: "wifi_image"
            pos: self.pos
            size: self.size
            on_release: self.parent.parent.on_image_press(self.name)


<BunnyWidget>:
    pos: self.pos
    size: self.size
    canvas.before:
        PushMatrix
        Rotate:
            angle: self.angle
            axis: 0, 0, 1
            origin: self.center
    canvas.after:
        PopMatrix


<RadioDongleWidget>:
    _wifi_image: _wifi_image
    _spinner: _spinner
    _search_button: _search_button
    _connect_button: _connect_button

    size_hint: 1, 1
    orientation: "horizontal"
    # Wifi Image
    Image:
        id: _wifi_image
        size_hint: 0.3, 1
        pos_hint: {"center_x": 0.5, "center_y":0.5}
    # Radio Options Spinner
    Spinner:
        id: _spinner
        size_hint: 1, 1
        markup: True
        size_hint: 1, 1
        font_size: '16sp'
        pos_hint: {"left": 1}

    GridLayout:
        rows: 2
        cols: 1
        size_hint: (1, 1)
        Button:
            id: _search_button
            size_hint: 1, 1
            text: "[b][i]Search[/i][/b]"
            markup: True
            font_size: '17sp'
        Button:
            id: _connect_button
            size_hint: 1, 1
            text: "[b][i]Connect[i][/b]"
            font_size: '17sp'
            markup: True

<BunnyActionBar>:

    ActionView:
        ActionPrevious:
            title: "Connection Status"
            with_previous: False

        ActionButton:
            text: "Connected"
        
        ActionButton:
            text: "State"
        
<DragAndResizeTriangle>:
    # Triangle Definitions
    drag_rectangle: self.x, self.y, self.width, self.height
    drag_timeout: 1000000
    drag_distance: 0
    canvas.after:
        Color:
            rgba: 0,0,0,0
        Rectangle:
            pos: self.pos
            size: self.size
        Color:
            rgba: self.fill_color
        Triangle:
            points:self.triangle_points

        Line:
            cap: "square"
            joint: "miter"
            width: self.border_width
            points: self.border_points


<DragAndResizeRect>:
    # drag definitions
    drag_rectangle: self.x, self.y, self.width, self.height
    drag_timeout: 10000000
    drag_distance: 0
    canvas.after:
        Color:
            rgba: self.fill_color
        Rectangle:
            size: self.size
            pos: self.pos
        
        Color:
            rgba: self.border_color
        Line:
            cap: "square"
            joint: 'miter'
            width: self._border_width
            rectangle: self._border_coord
                      

<DragAndResizePolygon>:
    # drag definitions
    drag_rectangle: self.x, self.y, self.width, self.height
    drag_timeout: 10000000
    drag_distance: 0

    canvas.after:
        Color: 
            rgba: self.fill_color
        Ellipse:
            pos: self.pos
            size: self.size
            segments: self.segments
        Color:
            rgba: self.border_color
        Line:
            points: self.line_points
            width: self.border_width


<GridWidget>:


<ColorDropDown>:
    red_slider: _red_slider
    green_slider: _green_slider
    blue_slider: _blue_slider
    transparency_slider: _transparency_slider
    none_button: _none_button


    Slider:
        id: _red_slider
        min: 0
        max: 1
        step: 0.1
        orientation: "horizontal"
        size_hint_y: None
        height: '20dp'
        cursor_height: '12sp'
        cursor_width: '12sp'
        
        canvas.before:
            Color: 
                rgba: 1, 0, 0, 1
            Rectangle:
                pos: self.pos
                size: self.size

    Slider:
        id: _green_slider
        min: 0
        max: 1
        step: 0.1
        orientation: "horizontal"
        size_hint_y: None
        height: '20dp'
        cursor_width: '12sp'
        cursor_height: '12sp'
        canvas.before:
            Color: 
                rgba: 0, 1, 0, 1
            Rectangle:
                pos: self.pos
                size: self.size

    Slider:
        id: _blue_slider
        min: 0
        max: 1
        step: 0.1
        orientation: "horizontal"
        size_hint_y: None
        height: '20dp'
        cursor_width: '12sp'
        cursor_height: '12sp'
        canvas.before:
            Color: 
                rgba: 0, 0, 1, 1
            Rectangle:
                pos: self.pos
                size: self.size

    Slider:
        id: _transparency_slider
        min: 0
        max: 1
        step: 0.1
        orientation: "horizontal"
        size_hint_y: None
        height: '20dp'
        cursor_width: '12sp'
        cursor_height: '12sp'
        canvas.before:
            Color: 
                rgba: 1, 1, 1, 0.2
            Rectangle:
                pos: self.pos
                size: self.size
    Button:
        id: _none_button
        size_hint_y: None
        height: '25dp'
        text: "[i]None[/i]"
        font_size: 12
        markup: True


<ShapeSettings>:
   
    _shape_label: _shape_label
    _shape_spinner: _shape_spinner
    
    _fill_color_label: _fill_color_label
    _fill_color_button: _fill_color_button 

    _type_label: _type_label
    _type_spinner: _type_spinner

    _border_color_label: _border_color_label
    _border_color_button: _border_color_button


    _lock_size_label: _lock_size_label
    _lock_size_checkbox: _lock_size_checkbox

    _lock_position_label: _lock_position_label
    _lock_position_checkbox: _lock_position_checkbox
    
    _place_button: _place_button
    _new_button: _new_button

    cols: 6
    row_force_default: True
    row_default_height: 30
    spacing: 2

    
    #(r1, c1)
    Label:
        id: _shape_label
        text: "Shape"
        markup: True
        font_size: self.parent._label_font_size
        canvas.before:
            Color:
                rgba: self.parent._bkg_color
            Rectangle:
                pos: self.pos
                size: self.size

    #(r1, c2)
    Spinner:
        id: _shape_spinner
        text: "Rectangle"
        values: ["Rectangle","Polygon","Ellipse"]
        sync_height: True
    
    #(r1, c3)
    Label:
        id: _fill_color_label
        text: "Fill"
        markup: True
        font_size: self.parent._label_font_size
        canvas.before:
            Color:
                rgba: self.parent._bkg_color
            Rectangle:
                pos: self.pos
                size: self.size

    #(r1, c4)
    Button:
        id: _fill_color_button
        markup: True
        font_size: 12
        background_color: 0, 0, 0, 1
        canvas:
            Color:
                rgba: self.parent._shape_fill_color
            Rectangle:
                pos: self.pos
                size: self.size

    #(r1, c5)
    Label:
        id: _type_label
        text: "Type"
        font_size: self.parent._label_font_size
        canvas.before:
            Color: 
                rgba: self.parent._bkg_color
            Rectangle:
                pos: self.pos
                size: self.size
    
    #(r1, c6)
    Spinner: 
        id: _type_spinner
        text: "Border"
        values: ["Border", "Obstacle"]
        canvas.before:
            Color:
                rgba: self.parent._bkg_color
            Rectangle:
                pos: self.pos
                size: self.size
        sync_height: True


    #(r2, c1)
    Label:
        id: _border_color_label
        text: "Border "
        font_size: self.parent._label_font_size
        pos: self.pos
        size: self.size
        canvas.before:
            Color:
                rgba: self.parent._bkg_color
            Rectangle:
                pos: self.pos
                size: self.size

    #(r2, c2)
    Button: 
        id: _border_color_button
        markup: True
        font_size: 12
        background_color: 0, 0, 0, 1
        canvas:
            Color:
                rgba: self.parent._shape_border_color
            Rectangle:
                pos: self.pos
                size: self.size
        
    #(r2, c3)
    Label:
        id: _lock_size_label
        text: "Lock Size"
        font_size: self.parent._label_font_size
        canvas.before:
            Color:
                rgba: self.parent._bkg_color
            Rectangle:
                pos: self.pos
                size: self.size
    
    #(r2, c4)
    CheckBox:
        id: _lock_size_checkbox
        color: 1, 1, 1, 1
        canvas.before:
            Color: 
                rgba: 0, 0, 0, 1
            Rectangle:
                pos: self.pos
                size: self.size

    #(r2, c5)
    Label:
        id: _lock_position_label
        text: "Lock Pos"
        font_size: self.parent._label_font_size
        canvas.before:
            Color:
                rgba: self.parent._bkg_color
            Rectangle:
                pos: self.pos
                size: self.size

    #(r2, c6)
    CheckBox:
        id: _lock_position_checkbox
        color: 1, 1, 1, 1
        canvas.before:
            Color:
                rgba: 0, 0, 0, 1
            Rectangle:
                pos: self.pos
                size: self.size
    #(r3, c1)
    Button:
        id: _place_button
        text: "Place"
        pos: self.pos
        size: self.size
    
    #(r3, c2)
    Button:
        id: _new_button
        text: "New"
        canvas.before:
            Color:
                rgba: self.parent._bkg_color
            Rectangle:
                pos: self.pos
                size: self.size


<ScaleSettings>:
    max_length_label: max_length_label
    text_input_wid: text_input_wid
    cols: 2
    Label:
        id: max_length_label
        text: "Maximum Length [m]"
        canvas.before:
            Color:
                rgba: 0, 0, 0, 1
            Rectangle: 
                pos: self.pos
                size: self.size
        
    TextInput:
        id: text_input_wid
        text: "15"
        multiline: False
        input_filter: "float"


<EffectNode>:
    orientation: "horizontal"
    height: '30sp'
    canvas.before:
        Color:
            rgb: self.bkg_color
        Rectangle:
            pos: self.pos
            size: self.size
    Label:
        id: type_label
        text: "[i]"+str(self.parent.effect_type)+"[/i]"
        outline_color: self.parent.outline_color
        markup: True
    Label: 
        pos_hint: {"left": 1}
        size_hint: 0.1, 1
        text: "[i]D: [/i]"
        outline_color: self.parent.outline_color
        markup: True

    TextInput:
        size_hint: 0.2, 1
        pos_hint: {"left": 1}
        id: start_delay
        text: str(self.parent.effect_duration)
        outline_color: self.parent.outline_color
        markup: True
        multiline: False
        input_filter: "float"
        font_size: 15
        background_color: self.parent.bkg_color
        foreground_color: 1,1,1,1
        on_text: self.update_effect
        
    Label:
        id: effect_duration
        pos_hint: {"left": 1}
        size_hint: 0.1, 1
        text: "[i]S: [/i]"
        outline_color: self.parent.outline_color
        markup: True
    
    TextInput:
        size_hint: 0.2, 1
        pos_hint: {"left": 1}
        id: start_delay
        text: str(self.parent.start_delay)
        outline_color: self.parent.outline_color
        markup: True
        multiline: False
        input_filter: "float"
        font_size: 15
        background_color: self.parent.bkg_color
        foreground_color: 1,1,1,1
    
<ChoreoBoard>:
    orientation: "vertical"
    padding: 5
    spacing: 5
    background_color: 0,0,0,1
    rectangle_btn: rectangle_btn
    ellipse_btn: ellipse_btn
    polygon_btn: polygon_btn
    triangle_btn: triangle_btn
    segments_layout: segments_layout
    add_shape_to_choreography_btn: add_shape_to_choreography_btn
    add_shape_to_canvas_btn: add_shape_to_canvas_btn
    remove_from_canvas_btn: remove_from_canvas_btn
    transition_choice_spn: transition_choice_spn
    lock_effect_btn: lock_effect_btn
    num_robots_spn: num_robots_spn
    num_robots_input: num_robots_input
    value_lbl: value_lbl
    value_slider: value_slider
    value_2_slider: value_2_slider 
    duration_input: duration_input
    preview_effect_btn: preview_effect_btn
    add_effect_to_shape_btn: add_effect_to_shape_btn
    animation_selection: animation_selection
    simulate_btn: simulate_btn
    delete_btn: delete_btn
    preview_shape_effects_btn: preview_shape_effects_btn

    BoxLayout:
        spacing: 2
        orientation: "horizontal"
        pos_hint: {"left": 1}
        size_hint: 1, 0.6
        
        GridLayout:
            pos_hint: {"left": 1}
            size_hint: 1, 1
            cols: 2
            spacing: 2
            Button:
                id: rectangle_btn
                text: "Rectangle"
                background_normal: ''
                background_color: 0, 0.4, 0.5, 1
            Button:
                id: polygon_btn
                text: "Polygon"
                background_normal: ''
                background_color: 0, 0.4, 0.5, 1

            Button:
                id: ellipse_btn
                text: "Ellipse"
                background_normal: ''
                background_color: 0, 0.4, 0.5, 1

            Button:
                id: triangle_btn
                text: "Triangle"
                background_normal: ''
                background_color: 0, 0.4, 0.5, 1

        BoxLayout:
            size_hint: 0.1, 1
            orientation: "horizontal"

        BoxLayout:
            pos_hint: {"top": 1}
            size_hint: 1, 0.8
            orientation: "vertical"
            pos_hint: {"right": 1}
            spacing : 3
            BoxLayout:
                id: segments_layout
                pos_hint: {"top": 1}
                orientation: "horizontal"
            Button:
                id: add_shape_to_choreography_btn
                text: "[i]Add Shape to Choreography[/i]"
                markup: True
                pos_hint: {"top": 1}
            Button:
                id: add_shape_to_canvas_btn
                text: "[i]Add Shape to Canvas[/i]"
                markup: True
                pos_hint: {"top": 1}
            Button:
                id: remove_from_canvas_btn
                text: "Remove from Canvas"
                markup: True
                pos_hint: {"top":1}
                
    BoxLayout:
        size_hint: 1, 0.1
        pos_hint: {"top": 1}
        orientation: "horizontal"
        Spinner:
            size_hint: 0.9, 1
            id: transition_choice_spn
            pos_hint: {"top": 1}
            values: ["Rotate", "Morph", "Form Only", "Translate"]
            text: "Rotate"
            sync_height: True
            background_normal: ''
            background_color: [0, 0, 1, 1] if transition_choice_spn.text == "Rotate" else [1, 0, 0, 1] if transition_choice_spn.text == "Morph" else [0, 0, 0, 1]
        Button:
            id: lock_effect_btn
            size_hint: 1, 1
            lock: False
            text: "Lock Effect"

    BoxLayout:
        size_hint: 1, 0.1
        pos_hint: {"top": 1}
        orientation: "horizontal"
        Label:
            halign: "left"
            size_hint: 0.4, 1
            text: "Robots"
            canvas.before:
                Color:
                    rgba: 0,0,0,1
                Rectangle:
                    pos: self.pos
                    size: self.size
        Spinner:
            size_hint: 0.3, 1
            id: num_robots_spn
            pos_hint: {"top": 1}
            values: ["All", "Minimum", "Maximum", "Custom"]
            sync_height: True
            text:"All"
            canvas.before:
            background_color: [1, 0, 1, 1] if self.text == "All" else [0.5, 0.7, 1, 1] 
        TextInput:
            id: num_robots_input
            size_hint: 0.3, 1
            pos_hint: {"left": 1}
            input_filter: "float"
            text: ""
            multiline: False
            disabled: False if num_robots_spn.text == "Custom" else True 
  
    BoxLayout:
        size_hint: 1, 0.1
        pos_hint: {"top": 1}
        orientation: "horizontal"
        Label:
            id: value_lbl
            padding: 20, 1
            size_hint: 0.67, 1
            markup: True
            text: "[b]Angle:[/b]   " + str(round(value_slider.value, 2)) if transition_choice_spn.text == "Rotate" else "[b]Expansion:[/b]   " + str(round(value_slider.value, 2)) if transition_choice_spn.text == "Morph" else ""
            canvas.before:
                Color:
                    rgba: 0,0,0,1
                Rectangle:
                    pos: self.pos
                    size: self.size

        Slider:
            id: value_slider
            name: "slider_1"
            mode: transition_choice_spn.text
            min:-360 if self.mode == "Rotate" else -5 if self.mode == "Morph" else -1000
            max: 360 if self.mode == "Rotate" else 5 if self.mode == "Morph" else 1000
            step: 5 if self.mode == "Rotate" else 0.01 if self.mode == "Morph" else 1
            orientation: "horizontal"
            value_track_color: 1,0,0,1
            value_track: False if self.mode == "Form Only" else True
            disabled: True if lock_effect_btn.text == "Lock Effect" else False
        Slider:
            id: value_2_slider
            mode: transition_choice_spn.text
            name: "slider_2"
            disabled: True if self.mode != "Translate" else False
            min: -2000
            max: 2000
            step: 50
            orientation: "horizontal"
            value_track_color: 1,0,0,1
            value_track: True
            disabled: True if lock_effect_btn.text == "Lock Effect" else False

    BoxLayout:
        size_hint: 1, 0.1
        pos_hint: {"top": 1}
        orientation: "horizontal"
        Label:
            halign: "left"
            size_hint: 0.6, 1
            text:"  Duration (min)"
            canvas.before:
                Color:
                    rgba: 0,0,0,1
                Rectangle:
                    pos: self.pos
                    size: self.size
        
        TextInput:
            id: duration_input
            size_hint: 0.3, 1
            pos_hint: {"left": 1}
            input_filter:"float"
            text: "5"
            multiline: False
        BoxLayout:
            size_hint: 0.6,1
            pos_hint: {"left": 1}
    
    GridLayout:
        size_hint: 1, 0.1
        pos_hint: {"left": 1}
        cols: 2
        Button:
            id: preview_effect_btn
            halign: "left"
            text: "Preview Effect"
        Button:
            id: add_effect_to_shape_btn
            halign: "left"
            text: "Add Effect to Shape"

    BoxLayout:
        size_hint: 1, 1
        pos_hint: {"top": 1}
        AnimationPanel:
            id: animation_selection
            size_hint: 1, 1
            pos_hint: {"top": 1}
            canvas.before:
                Color:
                    rgb: 0, 0, 0
                Rectangle:
                    pos: self.pos
                    size: self.size
    BoxLayout:
        size_hint: 1, 0.1
        pos_hint: {"top": 1}
        orientation: "horizontal"
        Button:
            id: simulate_btn
            text: "Simulate"

        Button:
            size_hint: 0.5, 1
            id: delete_btn
            text: "Delete "
        
        Button:
            size_hint: 1, 1
            id: preview_shape_effects_btn
            text: "Preview Shape Effects"


<ChoreoRect>:
    drag_rectangle: self.x, self.y, self.width, self.height
    drag_timeout: 10000000
    drag_distance: 0
    canvas.before:
        PushMatrix
        Rotate:
            angle: self.angle
            origin: self.center[0]-self.border_width, self.center[1] - self.border_width
        Scale:
            origin: self.center[0]-self.border_width, self.center[1] - self.border_width
            x: self.scale_factor[0] 
            y: self.scale_factor[1] 
            z: 1
        Translate:
            x: self.translate_factor[0]
            y: self.translate_factor[1]
            z: 1
        Color:
            rgba: 0,0,0,0
        Rectangle:
            size: self.size
            pos: self.pos

        Color:
            rgba: self.n_border_color
        Line:
            points: self.n_border_points
            width: self.border_width
        PopMatrix
    canvas.after:
        Color:
            rgba: self.c_border_color
        Line:
            points: self.c_border_points
            width: self.border_width


<ChoreoPolygon>:
    # drag definitions
    drag_rectangle: self.x, self.y, self.width, self.height
    drag_timeout: 10000000
    drag_distance: 0
    canvas.before:
        PushMatrix
        Rotate:
            angle: self.angle
            origin: self.center[0]-self.border_width, self.center[1] - self.border_width
        Scale:
            origin: self.center[0]-self.border_width, self.center[1] - self.border_width
            x: self.scale_factor[0] 
            y: self.scale_factor[1] 
            z: 1
        Translate:
            x: self.translate_factor[0]
            y: self.translate_factor[1]
            z: 1
        Color:
            rgba: 0,0,0,0
        Rectangle:
            pos: self.pos
            size: self.size
        Color:
            rgba: self.n_border_color
        Line:
            points: self.n_border_points
            width: self.border_width

    canvas.after:
        PopMatrix
        Color:
            rgba: self.c_border_color
        Line:
            points: self.line_points
            width: self.border_width


<ChoreoTriangle>:
    drag_rectangle: self.x, self.y, self.width, self.height
    drag_timeout: 10000000
    drag_distance: 0
    canvas.before:
        PushMatrix
        Rotate:
            angle: self.angle
            origin: self.center[0]-self.border_width, self.center[1] - self.border_width
        Scale:
            origin: self.center[0]-self.border_width, self.center[1] - self.border_width
            x: self.scale_factor[0] 
            y: self.scale_factor[1] 
            z: 1
        Translate:
            x: self.translate_factor[0]
            y: self.translate_factor[1]
            z: 1
        Color:
            rgba: 0,0,0,0
        
        Rectangle:
            pos: self.pos
            size: self.size
        Color:
            rgba: self.n_border_color
        Line:
            points: self.n_border_points
            width: self.border_width

    canvas.after:
        PopMatrix
        Color:
            rgba: self.c_border_color
        Line:
            points: self.border_points
            width: self.border_width
